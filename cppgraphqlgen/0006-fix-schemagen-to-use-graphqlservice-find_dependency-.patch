From b1dda6a69e6faa5fe27c992a86dc314be390348e Mon Sep 17 00:00:00 2001
From: Guillaume Papin <guillaume.papin@epitech.eu>
Date: Sat, 3 Nov 2018 12:24:28 +0100
Subject: [PATCH 6/6] fix schemagen to use graphqlservice/,
 find_dependency(cpprestsdk)

---
 CMakeLists.txt                                     |  59 ++-
 GraphQLService.cpp                                 |   4 +-
 Introspection.cpp                                  |   4 +-
 SchemaGenerator.cpp                                |   3 +-
 SchemaGenerator.h                                  |   4 +-
 cmake/cppgraphqlgen-config.cmake                   |  14 +
 .../graphqlservice/GraphQLService.h                |   0
 .../graphqlservice/Introspection.h                 |   4 +-
 samples/IntrospectionSchema.cpp                    | 584 ---------------------
 samples/IntrospectionSchema.h                      | 211 --------
 10 files changed, 65 insertions(+), 822 deletions(-)
 create mode 100644 cmake/cppgraphqlgen-config.cmake
 rename GraphQLService.h => include/graphqlservice/GraphQLService.h (100%)
 rename Introspection.h => include/graphqlservice/Introspection.h (98%)
 delete mode 100644 samples/IntrospectionSchema.cpp
 delete mode 100644 samples/IntrospectionSchema.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ab8a1b5..7116634 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -4,14 +4,13 @@
 cmake_minimum_required(VERSION 3.5.1)
 project(cppgraphqlgen)
 
+include(CMakePackageConfigHelpers)
+
 if(WIN32)
   # Let CMake figure out the exports for the SHARED library (DLL) on Windows.
   SET(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
 endif()
 
-add_library(graphqlservice GraphQLService.cpp Introspection.cpp IntrospectionSchema.cpp)
-add_executable(schemagen SchemaGenerator.cpp)
-
 find_library(GRAPHQLPARSER graphqlparser)
 
 find_package(cpprestsdk REQUIRED)
@@ -22,22 +21,33 @@ if(UNIX)
   list(APPEND CPPRESTSDK ${BOOST_SYSTEM})
 endif()
 
-target_include_directories(graphqlservice
-  PUBLIC
-    $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}>
-    $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}>
-    $<INSTALL_INTERFACE:include>
-)
-target_link_libraries(graphqlservice ${CPPRESTSDK} ${GRAPHQLPARSER})
+add_executable(schemagen SchemaGenerator.cpp)
+target_include_directories(schemagen PRIVATE include)
 target_link_libraries(schemagen ${CPPRESTSDK} ${GRAPHQLPARSER})
 
 add_custom_command(
-  OUTPUT IntrospectionSchema.cpp IntrospectionSchema.h
+  OUTPUT graphqlservice/IntrospectionSchema.cpp graphqlservice/IntrospectionSchema.h
   COMMAND schemagen
+  COMMAND ${CMAKE_COMMAND} -E rename IntrospectionSchema.cpp graphqlservice/IntrospectionSchema.cpp
+  COMMAND ${CMAKE_COMMAND} -E rename IntrospectionSchema.h graphqlservice/IntrospectionSchema.h
   DEPENDS schemagen
   COMMENT "Generating IntrospectionSchema files"
 )
 
+add_library(graphqlservice
+  GraphQLService.cpp
+  Introspection.cpp
+  ${CMAKE_BINARY_DIR}/graphqlservice/IntrospectionSchema.cpp
+)
+
+target_include_directories(graphqlservice
+  PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include>
+    $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}>
+    $<INSTALL_INTERFACE:include>
+)
+target_link_libraries(graphqlservice ${CPPRESTSDK} ${GRAPHQLPARSER})
+
 option(BUILD_TESTS "Build the tests and sample schema library." ON)
 option(UPDATE_SAMPLES "Regenerate the sample schema sources whether or not we're building the tests and the sample library." ON)
 
@@ -91,19 +101,28 @@ if(BUILD_TESTS OR UPDATE_SAMPLES)
   endif()
 
   if(UPDATE_SAMPLES)
-    install(FILES IntrospectionSchema.h IntrospectionSchema.cpp TodaySchema.h TodaySchema.cpp
+    install(
+      FILES
+        ${CMAKE_BINARY_DIR}/graphqlservice/IntrospectionSchema.h
+        ${CMAKE_BINARY_DIR}/graphqlservice/IntrospectionSchema.cpp
+        TodaySchema.h
+        TodaySchema.cpp
       DESTINATION ${CMAKE_SOURCE_DIR}/samples)
   endif()
 endif()
 
 install(TARGETS graphqlservice schemagen
-  EXPORT cppgraphqlgen-config
+  EXPORT cppgraphqlgen-targets
   RUNTIME DESTINATION bin
   ARCHIVE DESTINATION lib
   LIBRARY DESTINATION lib)
 
-install(FILES GraphQLService.h Introspection.h ${CMAKE_BINARY_DIR}/IntrospectionSchema.h
-  DESTINATION include/graphqlservice)
+install(FILES
+  include/graphqlservice/GraphQLService.h
+  include/graphqlservice/Introspection.h
+  ${CMAKE_BINARY_DIR}/graphqlservice/IntrospectionSchema.h
+  DESTINATION include/graphqlservice
+)
 
 if(WIN32)
   set(GRAPHQLSERVICE_DIR $<TARGET_FILE_DIR:graphqlservice>)
@@ -111,6 +130,12 @@ if(WIN32)
     DESTINATION lib)
 endif()
 
-install(EXPORT cppgraphqlgen-config
+set(CMAKE_INSTALL_CONFIGDIR lib/cmake/${PROJECT_NAME})
+install(FILES cmake/${PROJECT_NAME}-config.cmake
+  DESTINATION ${CMAKE_INSTALL_CONFIGDIR}
+)
+
+install(EXPORT cppgraphqlgen-targets
   NAMESPACE cppgraphqlgen::
-  DESTINATION lib/cppgraphqlgen)
+  DESTINATION ${CMAKE_INSTALL_CONFIGDIR}
+)
diff --git a/GraphQLService.cpp b/GraphQLService.cpp
index f5dca6d..7950179 100644
--- a/GraphQLService.cpp
+++ b/GraphQLService.cpp
@@ -1,7 +1,7 @@
 // Copyright (c) Microsoft Corporation. All rights reserved.
 // Licensed under the MIT License.
 
-#include "GraphQLService.h"
+#include "graphqlservice/GraphQLService.h"
 
 #include <iostream>
 #include <algorithm>
@@ -650,4 +650,4 @@ bool OperationDefinitionVisitor::visitOperationDefinition(const ast::OperationDe
 
 } /* namespace service */
 } /* namespace graphql */
-} /* namespace facebook */
\ No newline at end of file
+} /* namespace facebook */
diff --git a/Introspection.cpp b/Introspection.cpp
index 2cc9ce5..86394d7 100644
--- a/Introspection.cpp
+++ b/Introspection.cpp
@@ -1,7 +1,7 @@
 // Copyright (c) Microsoft Corporation. All rights reserved.
 // Licensed under the MIT License.
 
-#include "Introspection.h"
+#include "graphqlservice/Introspection.h"
 
 namespace facebook {
 namespace graphql {
@@ -478,4 +478,4 @@ std::unique_ptr<std::string> EnumValue::getDeprecationReason() const
 
 } /* namespace facebook */
 } /* namespace graphql */
-} /* namespace introspection */
\ No newline at end of file
+} /* namespace introspection */
diff --git a/SchemaGenerator.cpp b/SchemaGenerator.cpp
index 7fa3170..7de1cd5 100644
--- a/SchemaGenerator.cpp
+++ b/SchemaGenerator.cpp
@@ -2,7 +2,6 @@
 // Licensed under the MIT License.
 
 #include "SchemaGenerator.h"
-#include "GraphQLService.h"
 
 #include <exception>
 #include <iostream>
@@ -1082,7 +1081,7 @@ bool Generator::outputSource() const noexcept
 // Licensed under the MIT License.
 
 #include ")cpp" << _filenamePrefix << R"cpp(Schema.h"
-#include "Introspection.h"
+#include <graphqlservice/Introspection.h>
 
 #include <algorithm>
 #include <functional>
diff --git a/SchemaGenerator.h b/SchemaGenerator.h
index eec4f2f..b9582f2 100644
--- a/SchemaGenerator.h
+++ b/SchemaGenerator.h
@@ -6,7 +6,7 @@
 #include <array>
 #include <cstdio>
 
-#include "GraphQLService.h"
+#include "graphqlservice/GraphQLService.h"
 
 namespace facebook {
 namespace graphql {
@@ -267,4 +267,4 @@ private:
 
 } /* namespace schema */
 } /* namespace graphql */
-} /* namespace facebook */
\ No newline at end of file
+} /* namespace facebook */
diff --git a/cmake/cppgraphqlgen-config.cmake b/cmake/cppgraphqlgen-config.cmake
new file mode 100644
index 0000000..4d2744c
--- /dev/null
+++ b/cmake/cppgraphqlgen-config.cmake
@@ -0,0 +1,14 @@
+#.rst:
+# cppgraphqlgen
+# -------------
+#
+# The following import targets are created
+#
+# ::
+#
+#   cppgraphqlgen::graphqlservice
+#   cppgraphqlgen::schemagen
+#
+include(CMakeFindDependencyMacro)
+find_dependency(cpprestsdk REQUIRED)
+include("${CMAKE_CURRENT_LIST_DIR}/cppgraphqlgen-targets.cmake")
diff --git a/GraphQLService.h b/include/graphqlservice/GraphQLService.h
similarity index 100%
rename from GraphQLService.h
rename to include/graphqlservice/GraphQLService.h
diff --git a/Introspection.h b/include/graphqlservice/Introspection.h
similarity index 98%
rename from Introspection.h
rename to include/graphqlservice/Introspection.h
index 713e50a..1241e0e 100644
--- a/Introspection.h
+++ b/include/graphqlservice/Introspection.h
@@ -3,7 +3,7 @@
 
 #pragma once
 
-#include "IntrospectionSchema.h"
+#include "graphqlservice/IntrospectionSchema.h"
 
 namespace facebook {
 namespace graphql {
@@ -240,4 +240,4 @@ private:
 
 } /* namespace facebook */
 } /* namespace graphql */
-} /* namespace introspection */
\ No newline at end of file
+} /* namespace introspection */
diff --git a/samples/IntrospectionSchema.cpp b/samples/IntrospectionSchema.cpp
deleted file mode 100644
index 34ae206..0000000
--- a/samples/IntrospectionSchema.cpp
+++ /dev/null
@@ -1,584 +0,0 @@
-// Copyright (c) Microsoft Corporation. All rights reserved.
-// Licensed under the MIT License.
-
-#include "IntrospectionSchema.h"
-#include "Introspection.h"
-
-#include <algorithm>
-#include <functional>
-#include <sstream>
-#include <unordered_map>
-#include <exception>
-
-namespace facebook {
-namespace graphql {
-namespace service {
-
-template <>
-introspection::__DirectiveLocation ModifiedArgument<introspection::__DirectiveLocation>::convert(const web::json::value& value)
-{
-	static const std::unordered_map<std::string, introspection::__DirectiveLocation> s_names = {
-		{ "QUERY", introspection::__DirectiveLocation::QUERY },
-		{ "MUTATION", introspection::__DirectiveLocation::MUTATION },
-		{ "SUBSCRIPTION", introspection::__DirectiveLocation::SUBSCRIPTION },
-		{ "FIELD", introspection::__DirectiveLocation::FIELD },
-		{ "FRAGMENT_DEFINITION", introspection::__DirectiveLocation::FRAGMENT_DEFINITION },
-		{ "FRAGMENT_SPREAD", introspection::__DirectiveLocation::FRAGMENT_SPREAD },
-		{ "INLINE_FRAGMENT", introspection::__DirectiveLocation::INLINE_FRAGMENT },
-		{ "SCHEMA", introspection::__DirectiveLocation::SCHEMA },
-		{ "SCALAR", introspection::__DirectiveLocation::SCALAR },
-		{ "OBJECT", introspection::__DirectiveLocation::OBJECT },
-		{ "FIELD_DEFINITION", introspection::__DirectiveLocation::FIELD_DEFINITION },
-		{ "ARGUMENT_DEFINITION", introspection::__DirectiveLocation::ARGUMENT_DEFINITION },
-		{ "INTERFACE", introspection::__DirectiveLocation::INTERFACE },
-		{ "UNION", introspection::__DirectiveLocation::UNION },
-		{ "ENUM", introspection::__DirectiveLocation::ENUM },
-		{ "ENUM_VALUE", introspection::__DirectiveLocation::ENUM_VALUE },
-		{ "INPUT_OBJECT", introspection::__DirectiveLocation::INPUT_OBJECT },
-		{ "INPUT_FIELD_DEFINITION", introspection::__DirectiveLocation::INPUT_FIELD_DEFINITION }
-	};
-
-	auto itr = s_names.find(utility::conversions::to_utf8string(value.as_string()));
-
-	if (itr == s_names.cend())
-	{
-		throw web::json::json_exception(_XPLATSTR("not a valid __DirectiveLocation value"));
-	}
-
-	return itr->second;
-}
-
-template <>
-web::json::value service::ModifiedResult<introspection::__DirectiveLocation>::convert(const introspection::__DirectiveLocation& value, ResolverParams&&)
-{
-	static const std::string s_names[] = {
-		"QUERY",
-		"MUTATION",
-		"SUBSCRIPTION",
-		"FIELD",
-		"FRAGMENT_DEFINITION",
-		"FRAGMENT_SPREAD",
-		"INLINE_FRAGMENT",
-		"SCHEMA",
-		"SCALAR",
-		"OBJECT",
-		"FIELD_DEFINITION",
-		"ARGUMENT_DEFINITION",
-		"INTERFACE",
-		"UNION",
-		"ENUM",
-		"ENUM_VALUE",
-		"INPUT_OBJECT",
-		"INPUT_FIELD_DEFINITION"
-	};
-
-	return web::json::value::string(utility::conversions::to_string_t(s_names[static_cast<size_t>(value)]));
-}
-
-template <>
-introspection::__TypeKind ModifiedArgument<introspection::__TypeKind>::convert(const web::json::value& value)
-{
-	static const std::unordered_map<std::string, introspection::__TypeKind> s_names = {
-		{ "SCALAR", introspection::__TypeKind::SCALAR },
-		{ "OBJECT", introspection::__TypeKind::OBJECT },
-		{ "INTERFACE", introspection::__TypeKind::INTERFACE },
-		{ "UNION", introspection::__TypeKind::UNION },
-		{ "ENUM", introspection::__TypeKind::ENUM },
-		{ "INPUT_OBJECT", introspection::__TypeKind::INPUT_OBJECT },
-		{ "LIST", introspection::__TypeKind::LIST },
-		{ "NON_NULL", introspection::__TypeKind::NON_NULL }
-	};
-
-	auto itr = s_names.find(utility::conversions::to_utf8string(value.as_string()));
-
-	if (itr == s_names.cend())
-	{
-		throw web::json::json_exception(_XPLATSTR("not a valid __TypeKind value"));
-	}
-
-	return itr->second;
-}
-
-template <>
-web::json::value service::ModifiedResult<introspection::__TypeKind>::convert(const introspection::__TypeKind& value, ResolverParams&&)
-{
-	static const std::string s_names[] = {
-		"SCALAR",
-		"OBJECT",
-		"INTERFACE",
-		"UNION",
-		"ENUM",
-		"INPUT_OBJECT",
-		"LIST",
-		"NON_NULL"
-	};
-
-	return web::json::value::string(utility::conversions::to_string_t(s_names[static_cast<size_t>(value)]));
-}
-
-} /* namespace service */
-
-namespace introspection {
-namespace object {
-
-__Schema::__Schema()
-	: service::Object({
-		"__Schema"
-	}, {
-		{ "types", [this](service::ResolverParams&& params) { return resolveTypes(std::move(params)); } },
-		{ "queryType", [this](service::ResolverParams&& params) { return resolveQueryType(std::move(params)); } },
-		{ "mutationType", [this](service::ResolverParams&& params) { return resolveMutationType(std::move(params)); } },
-		{ "subscriptionType", [this](service::ResolverParams&& params) { return resolveSubscriptionType(std::move(params)); } },
-		{ "directives", [this](service::ResolverParams&& params) { return resolveDirectives(std::move(params)); } },
-		{ "__typename", [this](service::ResolverParams&& params) { return resolve__typename(std::move(params)); } }
-	})
-{
-}
-
-web::json::value __Schema::resolveTypes(service::ResolverParams&& params)
-{
-	auto result = getTypes();
-
-	return service::ModifiedResult<__Type>::convert<service::TypeModifier::List>(result, std::move(params));
-}
-
-web::json::value __Schema::resolveQueryType(service::ResolverParams&& params)
-{
-	auto result = getQueryType();
-
-	return service::ModifiedResult<__Type>::convert(result, std::move(params));
-}
-
-web::json::value __Schema::resolveMutationType(service::ResolverParams&& params)
-{
-	auto result = getMutationType();
-
-	return service::ModifiedResult<__Type>::convert<service::TypeModifier::Nullable>(result, std::move(params));
-}
-
-web::json::value __Schema::resolveSubscriptionType(service::ResolverParams&& params)
-{
-	auto result = getSubscriptionType();
-
-	return service::ModifiedResult<__Type>::convert<service::TypeModifier::Nullable>(result, std::move(params));
-}
-
-web::json::value __Schema::resolveDirectives(service::ResolverParams&& params)
-{
-	auto result = getDirectives();
-
-	return service::ModifiedResult<__Directive>::convert<service::TypeModifier::List>(result, std::move(params));
-}
-
-web::json::value __Schema::resolve__typename(service::ResolverParams&&)
-{
-	return web::json::value::string(_XPLATSTR("__Schema"));
-}
-
-__Directive::__Directive()
-	: service::Object({
-		"__Directive"
-	}, {
-		{ "name", [this](service::ResolverParams&& params) { return resolveName(std::move(params)); } },
-		{ "description", [this](service::ResolverParams&& params) { return resolveDescription(std::move(params)); } },
-		{ "locations", [this](service::ResolverParams&& params) { return resolveLocations(std::move(params)); } },
-		{ "args", [this](service::ResolverParams&& params) { return resolveArgs(std::move(params)); } },
-		{ "__typename", [this](service::ResolverParams&& params) { return resolve__typename(std::move(params)); } }
-	})
-{
-}
-
-web::json::value __Directive::resolveName(service::ResolverParams&& params)
-{
-	auto result = getName();
-
-	return service::ModifiedResult<std::string>::convert(result, std::move(params));
-}
-
-web::json::value __Directive::resolveDescription(service::ResolverParams&& params)
-{
-	auto result = getDescription();
-
-	return service::ModifiedResult<std::string>::convert<service::TypeModifier::Nullable>(result, std::move(params));
-}
-
-web::json::value __Directive::resolveLocations(service::ResolverParams&& params)
-{
-	auto result = getLocations();
-
-	return service::ModifiedResult<__DirectiveLocation>::convert<service::TypeModifier::List>(result, std::move(params));
-}
-
-web::json::value __Directive::resolveArgs(service::ResolverParams&& params)
-{
-	auto result = getArgs();
-
-	return service::ModifiedResult<__InputValue>::convert<service::TypeModifier::List>(result, std::move(params));
-}
-
-web::json::value __Directive::resolve__typename(service::ResolverParams&&)
-{
-	return web::json::value::string(_XPLATSTR("__Directive"));
-}
-
-__Type::__Type()
-	: service::Object({
-		"__Type"
-	}, {
-		{ "kind", [this](service::ResolverParams&& params) { return resolveKind(std::move(params)); } },
-		{ "name", [this](service::ResolverParams&& params) { return resolveName(std::move(params)); } },
-		{ "description", [this](service::ResolverParams&& params) { return resolveDescription(std::move(params)); } },
-		{ "fields", [this](service::ResolverParams&& params) { return resolveFields(std::move(params)); } },
-		{ "interfaces", [this](service::ResolverParams&& params) { return resolveInterfaces(std::move(params)); } },
-		{ "possibleTypes", [this](service::ResolverParams&& params) { return resolvePossibleTypes(std::move(params)); } },
-		{ "enumValues", [this](service::ResolverParams&& params) { return resolveEnumValues(std::move(params)); } },
-		{ "inputFields", [this](service::ResolverParams&& params) { return resolveInputFields(std::move(params)); } },
-		{ "ofType", [this](service::ResolverParams&& params) { return resolveOfType(std::move(params)); } },
-		{ "__typename", [this](service::ResolverParams&& params) { return resolve__typename(std::move(params)); } }
-	})
-{
-}
-
-web::json::value __Type::resolveKind(service::ResolverParams&& params)
-{
-	auto result = getKind();
-
-	return service::ModifiedResult<__TypeKind>::convert(result, std::move(params));
-}
-
-web::json::value __Type::resolveName(service::ResolverParams&& params)
-{
-	auto result = getName();
-
-	return service::ModifiedResult<std::string>::convert<service::TypeModifier::Nullable>(result, std::move(params));
-}
-
-web::json::value __Type::resolveDescription(service::ResolverParams&& params)
-{
-	auto result = getDescription();
-
-	return service::ModifiedResult<std::string>::convert<service::TypeModifier::Nullable>(result, std::move(params));
-}
-
-web::json::value __Type::resolveFields(service::ResolverParams&& params)
-{
-	static const auto defaultArguments = web::json::value::object({
-		{ _XPLATSTR("includeDeprecated"), web::json::value::parse(_XPLATSTR(R"js(false)js")) }
-	});
-
-	auto pairIncludeDeprecated = service::ModifiedArgument<bool>::find<service::TypeModifier::Nullable>("includeDeprecated", params.arguments);
-	auto argIncludeDeprecated = (pairIncludeDeprecated.second
-		? std::move(pairIncludeDeprecated.first)
-		: service::ModifiedArgument<bool>::require<service::TypeModifier::Nullable>("includeDeprecated", defaultArguments.as_object()));
-	auto result = getFields(std::move(argIncludeDeprecated));
-
-	return service::ModifiedResult<__Field>::convert<service::TypeModifier::Nullable, service::TypeModifier::List>(result, std::move(params));
-}
-
-web::json::value __Type::resolveInterfaces(service::ResolverParams&& params)
-{
-	auto result = getInterfaces();
-
-	return service::ModifiedResult<__Type>::convert<service::TypeModifier::Nullable, service::TypeModifier::List>(result, std::move(params));
-}
-
-web::json::value __Type::resolvePossibleTypes(service::ResolverParams&& params)
-{
-	auto result = getPossibleTypes();
-
-	return service::ModifiedResult<__Type>::convert<service::TypeModifier::Nullable, service::TypeModifier::List>(result, std::move(params));
-}
-
-web::json::value __Type::resolveEnumValues(service::ResolverParams&& params)
-{
-	static const auto defaultArguments = web::json::value::object({
-		{ _XPLATSTR("includeDeprecated"), web::json::value::parse(_XPLATSTR(R"js(false)js")) }
-	});
-
-	auto pairIncludeDeprecated = service::ModifiedArgument<bool>::find<service::TypeModifier::Nullable>("includeDeprecated", params.arguments);
-	auto argIncludeDeprecated = (pairIncludeDeprecated.second
-		? std::move(pairIncludeDeprecated.first)
-		: service::ModifiedArgument<bool>::require<service::TypeModifier::Nullable>("includeDeprecated", defaultArguments.as_object()));
-	auto result = getEnumValues(std::move(argIncludeDeprecated));
-
-	return service::ModifiedResult<__EnumValue>::convert<service::TypeModifier::Nullable, service::TypeModifier::List>(result, std::move(params));
-}
-
-web::json::value __Type::resolveInputFields(service::ResolverParams&& params)
-{
-	auto result = getInputFields();
-
-	return service::ModifiedResult<__InputValue>::convert<service::TypeModifier::Nullable, service::TypeModifier::List>(result, std::move(params));
-}
-
-web::json::value __Type::resolveOfType(service::ResolverParams&& params)
-{
-	auto result = getOfType();
-
-	return service::ModifiedResult<__Type>::convert<service::TypeModifier::Nullable>(result, std::move(params));
-}
-
-web::json::value __Type::resolve__typename(service::ResolverParams&&)
-{
-	return web::json::value::string(_XPLATSTR("__Type"));
-}
-
-__Field::__Field()
-	: service::Object({
-		"__Field"
-	}, {
-		{ "name", [this](service::ResolverParams&& params) { return resolveName(std::move(params)); } },
-		{ "description", [this](service::ResolverParams&& params) { return resolveDescription(std::move(params)); } },
-		{ "args", [this](service::ResolverParams&& params) { return resolveArgs(std::move(params)); } },
-		{ "type", [this](service::ResolverParams&& params) { return resolveType(std::move(params)); } },
-		{ "isDeprecated", [this](service::ResolverParams&& params) { return resolveIsDeprecated(std::move(params)); } },
-		{ "deprecationReason", [this](service::ResolverParams&& params) { return resolveDeprecationReason(std::move(params)); } },
-		{ "__typename", [this](service::ResolverParams&& params) { return resolve__typename(std::move(params)); } }
-	})
-{
-}
-
-web::json::value __Field::resolveName(service::ResolverParams&& params)
-{
-	auto result = getName();
-
-	return service::ModifiedResult<std::string>::convert(result, std::move(params));
-}
-
-web::json::value __Field::resolveDescription(service::ResolverParams&& params)
-{
-	auto result = getDescription();
-
-	return service::ModifiedResult<std::string>::convert<service::TypeModifier::Nullable>(result, std::move(params));
-}
-
-web::json::value __Field::resolveArgs(service::ResolverParams&& params)
-{
-	auto result = getArgs();
-
-	return service::ModifiedResult<__InputValue>::convert<service::TypeModifier::List>(result, std::move(params));
-}
-
-web::json::value __Field::resolveType(service::ResolverParams&& params)
-{
-	auto result = getType();
-
-	return service::ModifiedResult<__Type>::convert(result, std::move(params));
-}
-
-web::json::value __Field::resolveIsDeprecated(service::ResolverParams&& params)
-{
-	auto result = getIsDeprecated();
-
-	return service::ModifiedResult<bool>::convert(result, std::move(params));
-}
-
-web::json::value __Field::resolveDeprecationReason(service::ResolverParams&& params)
-{
-	auto result = getDeprecationReason();
-
-	return service::ModifiedResult<std::string>::convert<service::TypeModifier::Nullable>(result, std::move(params));
-}
-
-web::json::value __Field::resolve__typename(service::ResolverParams&&)
-{
-	return web::json::value::string(_XPLATSTR("__Field"));
-}
-
-__InputValue::__InputValue()
-	: service::Object({
-		"__InputValue"
-	}, {
-		{ "name", [this](service::ResolverParams&& params) { return resolveName(std::move(params)); } },
-		{ "description", [this](service::ResolverParams&& params) { return resolveDescription(std::move(params)); } },
-		{ "type", [this](service::ResolverParams&& params) { return resolveType(std::move(params)); } },
-		{ "defaultValue", [this](service::ResolverParams&& params) { return resolveDefaultValue(std::move(params)); } },
-		{ "__typename", [this](service::ResolverParams&& params) { return resolve__typename(std::move(params)); } }
-	})
-{
-}
-
-web::json::value __InputValue::resolveName(service::ResolverParams&& params)
-{
-	auto result = getName();
-
-	return service::ModifiedResult<std::string>::convert(result, std::move(params));
-}
-
-web::json::value __InputValue::resolveDescription(service::ResolverParams&& params)
-{
-	auto result = getDescription();
-
-	return service::ModifiedResult<std::string>::convert<service::TypeModifier::Nullable>(result, std::move(params));
-}
-
-web::json::value __InputValue::resolveType(service::ResolverParams&& params)
-{
-	auto result = getType();
-
-	return service::ModifiedResult<__Type>::convert(result, std::move(params));
-}
-
-web::json::value __InputValue::resolveDefaultValue(service::ResolverParams&& params)
-{
-	auto result = getDefaultValue();
-
-	return service::ModifiedResult<std::string>::convert<service::TypeModifier::Nullable>(result, std::move(params));
-}
-
-web::json::value __InputValue::resolve__typename(service::ResolverParams&&)
-{
-	return web::json::value::string(_XPLATSTR("__InputValue"));
-}
-
-__EnumValue::__EnumValue()
-	: service::Object({
-		"__EnumValue"
-	}, {
-		{ "name", [this](service::ResolverParams&& params) { return resolveName(std::move(params)); } },
-		{ "description", [this](service::ResolverParams&& params) { return resolveDescription(std::move(params)); } },
-		{ "isDeprecated", [this](service::ResolverParams&& params) { return resolveIsDeprecated(std::move(params)); } },
-		{ "deprecationReason", [this](service::ResolverParams&& params) { return resolveDeprecationReason(std::move(params)); } },
-		{ "__typename", [this](service::ResolverParams&& params) { return resolve__typename(std::move(params)); } }
-	})
-{
-}
-
-web::json::value __EnumValue::resolveName(service::ResolverParams&& params)
-{
-	auto result = getName();
-
-	return service::ModifiedResult<std::string>::convert(result, std::move(params));
-}
-
-web::json::value __EnumValue::resolveDescription(service::ResolverParams&& params)
-{
-	auto result = getDescription();
-
-	return service::ModifiedResult<std::string>::convert<service::TypeModifier::Nullable>(result, std::move(params));
-}
-
-web::json::value __EnumValue::resolveIsDeprecated(service::ResolverParams&& params)
-{
-	auto result = getIsDeprecated();
-
-	return service::ModifiedResult<bool>::convert(result, std::move(params));
-}
-
-web::json::value __EnumValue::resolveDeprecationReason(service::ResolverParams&& params)
-{
-	auto result = getDeprecationReason();
-
-	return service::ModifiedResult<std::string>::convert<service::TypeModifier::Nullable>(result, std::move(params));
-}
-
-web::json::value __EnumValue::resolve__typename(service::ResolverParams&&)
-{
-	return web::json::value::string(_XPLATSTR("__EnumValue"));
-}
-
-} /* namespace object */
-
-void AddTypesToSchema(std::shared_ptr<introspection::Schema> schema)
-{
-	auto type__DirectiveLocation= std::make_shared<introspection::EnumType>("__DirectiveLocation");
-	schema->AddType("__DirectiveLocation", type__DirectiveLocation);
-	auto type__TypeKind= std::make_shared<introspection::EnumType>("__TypeKind");
-	schema->AddType("__TypeKind", type__TypeKind);
-	auto type__Schema= std::make_shared<introspection::ObjectType>("__Schema");
-	schema->AddType("__Schema", type__Schema);
-	auto type__Directive= std::make_shared<introspection::ObjectType>("__Directive");
-	schema->AddType("__Directive", type__Directive);
-	auto type__Type= std::make_shared<introspection::ObjectType>("__Type");
-	schema->AddType("__Type", type__Type);
-	auto type__Field= std::make_shared<introspection::ObjectType>("__Field");
-	schema->AddType("__Field", type__Field);
-	auto type__InputValue= std::make_shared<introspection::ObjectType>("__InputValue");
-	schema->AddType("__InputValue", type__InputValue);
-	auto type__EnumValue= std::make_shared<introspection::ObjectType>("__EnumValue");
-	schema->AddType("__EnumValue", type__EnumValue);
-
-	type__DirectiveLocation->AddEnumValues({
-		"QUERY",
-		"MUTATION",
-		"SUBSCRIPTION",
-		"FIELD",
-		"FRAGMENT_DEFINITION",
-		"FRAGMENT_SPREAD",
-		"INLINE_FRAGMENT",
-		"SCHEMA",
-		"SCALAR",
-		"OBJECT",
-		"FIELD_DEFINITION",
-		"ARGUMENT_DEFINITION",
-		"INTERFACE",
-		"UNION",
-		"ENUM",
-		"ENUM_VALUE",
-		"INPUT_OBJECT",
-		"INPUT_FIELD_DEFINITION"
-	});
-	type__TypeKind->AddEnumValues({
-		"SCALAR",
-		"OBJECT",
-		"INTERFACE",
-		"UNION",
-		"ENUM",
-		"INPUT_OBJECT",
-		"LIST",
-		"NON_NULL"
-	});
-
-	type__Schema->AddFields({
-		std::make_shared<introspection::Field>("types", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::LIST, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("__Type"))))),
-		std::make_shared<introspection::Field>("queryType", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("__Type"))),
-		std::make_shared<introspection::Field>("mutationType", std::vector<std::shared_ptr<introspection::InputValue>>(), schema->LookupType("__Type")),
-		std::make_shared<introspection::Field>("subscriptionType", std::vector<std::shared_ptr<introspection::InputValue>>(), schema->LookupType("__Type")),
-		std::make_shared<introspection::Field>("directives", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::LIST, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("__Directive")))))
-	});
-	type__Directive->AddFields({
-		std::make_shared<introspection::Field>("name", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("String"))),
-		std::make_shared<introspection::Field>("description", std::vector<std::shared_ptr<introspection::InputValue>>(), schema->LookupType("String")),
-		std::make_shared<introspection::Field>("locations", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::LIST, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("__DirectiveLocation"))))),
-		std::make_shared<introspection::Field>("args", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::LIST, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("__InputValue")))))
-	});
-	type__Type->AddFields({
-		std::make_shared<introspection::Field>("kind", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("__TypeKind"))),
-		std::make_shared<introspection::Field>("name", std::vector<std::shared_ptr<introspection::InputValue>>(), schema->LookupType("String")),
-		std::make_shared<introspection::Field>("description", std::vector<std::shared_ptr<introspection::InputValue>>(), schema->LookupType("String")),
-		std::make_shared<introspection::Field>("fields", std::vector<std::shared_ptr<introspection::InputValue>>({
-			std::make_shared<introspection::InputValue>("includeDeprecated", schema->LookupType("Boolean"), web::json::value::parse(_XPLATSTR(R"js(false)js")))
-		}), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::LIST, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("__Field"))))),
-		std::make_shared<introspection::Field>("interfaces", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::LIST, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("__Type"))))),
-		std::make_shared<introspection::Field>("possibleTypes", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::LIST, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("__Type"))))),
-		std::make_shared<introspection::Field>("enumValues", std::vector<std::shared_ptr<introspection::InputValue>>({
-			std::make_shared<introspection::InputValue>("includeDeprecated", schema->LookupType("Boolean"), web::json::value::parse(_XPLATSTR(R"js(false)js")))
-		}), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::LIST, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("__EnumValue"))))),
-		std::make_shared<introspection::Field>("inputFields", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::LIST, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("__InputValue"))))),
-		std::make_shared<introspection::Field>("ofType", std::vector<std::shared_ptr<introspection::InputValue>>(), schema->LookupType("__Type"))
-	});
-	type__Field->AddFields({
-		std::make_shared<introspection::Field>("name", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("String"))),
-		std::make_shared<introspection::Field>("description", std::vector<std::shared_ptr<introspection::InputValue>>(), schema->LookupType("String")),
-		std::make_shared<introspection::Field>("args", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::LIST, std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("__InputValue"))))),
-		std::make_shared<introspection::Field>("type", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("__Type"))),
-		std::make_shared<introspection::Field>("isDeprecated", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("Boolean"))),
-		std::make_shared<introspection::Field>("deprecationReason", std::vector<std::shared_ptr<introspection::InputValue>>(), schema->LookupType("String"))
-	});
-	type__InputValue->AddFields({
-		std::make_shared<introspection::Field>("name", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("String"))),
-		std::make_shared<introspection::Field>("description", std::vector<std::shared_ptr<introspection::InputValue>>(), schema->LookupType("String")),
-		std::make_shared<introspection::Field>("type", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("__Type"))),
-		std::make_shared<introspection::Field>("defaultValue", std::vector<std::shared_ptr<introspection::InputValue>>(), schema->LookupType("String"))
-	});
-	type__EnumValue->AddFields({
-		std::make_shared<introspection::Field>("name", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("String"))),
-		std::make_shared<introspection::Field>("description", std::vector<std::shared_ptr<introspection::InputValue>>(), schema->LookupType("String")),
-		std::make_shared<introspection::Field>("isDeprecated", std::vector<std::shared_ptr<introspection::InputValue>>(), std::make_shared<introspection::WrapperType>(introspection::__TypeKind::NON_NULL, schema->LookupType("Boolean"))),
-		std::make_shared<introspection::Field>("deprecationReason", std::vector<std::shared_ptr<introspection::InputValue>>(), schema->LookupType("String"))
-	});
-}
-
-} /* namespace introspection */
-} /* namespace graphql */
-} /* namespace facebook */
\ No newline at end of file
diff --git a/samples/IntrospectionSchema.h b/samples/IntrospectionSchema.h
deleted file mode 100644
index b5b87dc..0000000
--- a/samples/IntrospectionSchema.h
+++ /dev/null
@@ -1,211 +0,0 @@
-// Copyright (c) Microsoft Corporation. All rights reserved.
-// Licensed under the MIT License.
-
-#pragma once
-
-#include <memory>
-#include <string>
-#include <vector>
-
-#include <cpprest/json.h>
-
-#include "GraphQLService.h"
-
-namespace facebook {
-namespace graphql {
-namespace introspection {
-
-class Schema;
-
-enum class __DirectiveLocation
-{
-	QUERY,
-	MUTATION,
-	SUBSCRIPTION,
-	FIELD,
-	FRAGMENT_DEFINITION,
-	FRAGMENT_SPREAD,
-	INLINE_FRAGMENT,
-	SCHEMA,
-	SCALAR,
-	OBJECT,
-	FIELD_DEFINITION,
-	ARGUMENT_DEFINITION,
-	INTERFACE,
-	UNION,
-	ENUM,
-	ENUM_VALUE,
-	INPUT_OBJECT,
-	INPUT_FIELD_DEFINITION
-};
-
-enum class __TypeKind
-{
-	SCALAR,
-	OBJECT,
-	INTERFACE,
-	UNION,
-	ENUM,
-	INPUT_OBJECT,
-	LIST,
-	NON_NULL
-};
-
-namespace object {
-
-class __Schema;
-class __Directive;
-class __Type;
-class __Field;
-class __InputValue;
-class __EnumValue;
-
-class __Schema
-	: public service::Object
-{
-protected:
-	__Schema();
-
-public:
-	virtual std::vector<std::shared_ptr<__Type>> getTypes() const = 0;
-	virtual std::shared_ptr<__Type> getQueryType() const = 0;
-	virtual std::shared_ptr<__Type> getMutationType() const = 0;
-	virtual std::shared_ptr<__Type> getSubscriptionType() const = 0;
-	virtual std::vector<std::shared_ptr<__Directive>> getDirectives() const = 0;
-
-private:
-	web::json::value resolveTypes(service::ResolverParams&& params);
-	web::json::value resolveQueryType(service::ResolverParams&& params);
-	web::json::value resolveMutationType(service::ResolverParams&& params);
-	web::json::value resolveSubscriptionType(service::ResolverParams&& params);
-	web::json::value resolveDirectives(service::ResolverParams&& params);
-
-	web::json::value resolve__typename(service::ResolverParams&& params);
-};
-
-class __Directive
-	: public service::Object
-{
-protected:
-	__Directive();
-
-public:
-	virtual std::string getName() const = 0;
-	virtual std::unique_ptr<std::string> getDescription() const = 0;
-	virtual std::vector<__DirectiveLocation> getLocations() const = 0;
-	virtual std::vector<std::shared_ptr<__InputValue>> getArgs() const = 0;
-
-private:
-	web::json::value resolveName(service::ResolverParams&& params);
-	web::json::value resolveDescription(service::ResolverParams&& params);
-	web::json::value resolveLocations(service::ResolverParams&& params);
-	web::json::value resolveArgs(service::ResolverParams&& params);
-
-	web::json::value resolve__typename(service::ResolverParams&& params);
-};
-
-class __Type
-	: public service::Object
-{
-protected:
-	__Type();
-
-public:
-	virtual __TypeKind getKind() const = 0;
-	virtual std::unique_ptr<std::string> getName() const = 0;
-	virtual std::unique_ptr<std::string> getDescription() const = 0;
-	virtual std::unique_ptr<std::vector<std::shared_ptr<__Field>>> getFields(std::unique_ptr<bool>&& includeDeprecated) const = 0;
-	virtual std::unique_ptr<std::vector<std::shared_ptr<__Type>>> getInterfaces() const = 0;
-	virtual std::unique_ptr<std::vector<std::shared_ptr<__Type>>> getPossibleTypes() const = 0;
-	virtual std::unique_ptr<std::vector<std::shared_ptr<__EnumValue>>> getEnumValues(std::unique_ptr<bool>&& includeDeprecated) const = 0;
-	virtual std::unique_ptr<std::vector<std::shared_ptr<__InputValue>>> getInputFields() const = 0;
-	virtual std::shared_ptr<__Type> getOfType() const = 0;
-
-private:
-	web::json::value resolveKind(service::ResolverParams&& params);
-	web::json::value resolveName(service::ResolverParams&& params);
-	web::json::value resolveDescription(service::ResolverParams&& params);
-	web::json::value resolveFields(service::ResolverParams&& params);
-	web::json::value resolveInterfaces(service::ResolverParams&& params);
-	web::json::value resolvePossibleTypes(service::ResolverParams&& params);
-	web::json::value resolveEnumValues(service::ResolverParams&& params);
-	web::json::value resolveInputFields(service::ResolverParams&& params);
-	web::json::value resolveOfType(service::ResolverParams&& params);
-
-	web::json::value resolve__typename(service::ResolverParams&& params);
-};
-
-class __Field
-	: public service::Object
-{
-protected:
-	__Field();
-
-public:
-	virtual std::string getName() const = 0;
-	virtual std::unique_ptr<std::string> getDescription() const = 0;
-	virtual std::vector<std::shared_ptr<__InputValue>> getArgs() const = 0;
-	virtual std::shared_ptr<__Type> getType() const = 0;
-	virtual bool getIsDeprecated() const = 0;
-	virtual std::unique_ptr<std::string> getDeprecationReason() const = 0;
-
-private:
-	web::json::value resolveName(service::ResolverParams&& params);
-	web::json::value resolveDescription(service::ResolverParams&& params);
-	web::json::value resolveArgs(service::ResolverParams&& params);
-	web::json::value resolveType(service::ResolverParams&& params);
-	web::json::value resolveIsDeprecated(service::ResolverParams&& params);
-	web::json::value resolveDeprecationReason(service::ResolverParams&& params);
-
-	web::json::value resolve__typename(service::ResolverParams&& params);
-};
-
-class __InputValue
-	: public service::Object
-{
-protected:
-	__InputValue();
-
-public:
-	virtual std::string getName() const = 0;
-	virtual std::unique_ptr<std::string> getDescription() const = 0;
-	virtual std::shared_ptr<__Type> getType() const = 0;
-	virtual std::unique_ptr<std::string> getDefaultValue() const = 0;
-
-private:
-	web::json::value resolveName(service::ResolverParams&& params);
-	web::json::value resolveDescription(service::ResolverParams&& params);
-	web::json::value resolveType(service::ResolverParams&& params);
-	web::json::value resolveDefaultValue(service::ResolverParams&& params);
-
-	web::json::value resolve__typename(service::ResolverParams&& params);
-};
-
-class __EnumValue
-	: public service::Object
-{
-protected:
-	__EnumValue();
-
-public:
-	virtual std::string getName() const = 0;
-	virtual std::unique_ptr<std::string> getDescription() const = 0;
-	virtual bool getIsDeprecated() const = 0;
-	virtual std::unique_ptr<std::string> getDeprecationReason() const = 0;
-
-private:
-	web::json::value resolveName(service::ResolverParams&& params);
-	web::json::value resolveDescription(service::ResolverParams&& params);
-	web::json::value resolveIsDeprecated(service::ResolverParams&& params);
-	web::json::value resolveDeprecationReason(service::ResolverParams&& params);
-
-	web::json::value resolve__typename(service::ResolverParams&& params);
-};
-
-} /* namespace object */
-
-void AddTypesToSchema(std::shared_ptr<introspection::Schema> schema);
-
-} /* namespace introspection */
-} /* namespace graphql */
-} /* namespace facebook */
\ No newline at end of file
-- 
2.10.0

